module PuxComponent where

import Control.Monad.Eff (Eff)
import Control.Monad.Eff.Exception (EXCEPTION)
import DOM.Node.Types (ElementId(..))
import Data.Array (singleton)
import Data.Maybe (Maybe(..))
import Data.NonEmpty ((:|))
import Pux (noEffects, start)
import Pux.DOM.HTML (HTML)
import Pux.Renderer.React (renderToDOM)
import Signal.Channel (CHANNEL)
import Text.Smolder.HTML (div)
import Text.Smolder.Markup (text)
import Videojs.HlsjsSourceHandler (Options, toNativeOptions, videojsImpl')
import Videojs (Playlist, Preload(Metadata), Tech(Html5, Flash), Watermark, WatermarkPosition(TopLeft))
import Videojs.PuxComponent (videojsComponent)
import Prelude hiding (div)

playlist :: Playlist
playlist =
    singleton
      { sources:
        { hls: Just "http://stream5.nadaje.com:14766/live/Xkd808.stream/playlist.m3u8"
        , rtmp: Just "rtmp://stream5.nadaje.com:14766/live/Xkd808.stream"
        , mpegDash: (Nothing ∷ Maybe String)
        }
      , poster: Just "./static/pimp.JPG"
      }

options ∷ Options
options =
  { autoPlay: false
  , controlBarVisibility: true
  , debug: true
  , parentId: ElementId "unused"
  , playlist: playlist
  , preload: Metadata
  , techOrder: Flash :| [Html5]
  , watermark
  }

watermark :: Maybe Watermark
watermark =
  Just
    { url: "./static/khan.png"
    , position: TopLeft
    , fadeOut: Just 25
    }

view ∷ Unit → HTML Unit
view _ =
  div $ do
    text "Generated by Pux!"
    videojsComponent videojsImpl' toNativeOptions options 0 (pure unit)

run ∷ ∀ eff. String → Eff (channel ∷ CHANNEL, exception ∷ EXCEPTION | eff) Unit
run parentId = do
  app ← start
    { initialState: unit
    , foldp: (\_ s → noEffects s)
    , view: view
    , inputs: []
    }
  renderToDOM ("#" <> parentId) app.markup app.input
  pure unit
